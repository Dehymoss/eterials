"""
üìÇ ENDPOINT ESPEC√çFICO PARA GESTI√ìN DE CATEGOR√çAS
Responsabilidad √∫nica: CRUD completo de categor√≠as y subcategor√≠as + Sistema de iconos autom√°tico
"""

from flask import Blueprint, request, jsonify
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
import os
import re
from modulos.backend.menu.database.models.categoria import Categoria
from modulos.backend.menu.database.models.subcategoria import Subcategoria

# Configuraci√≥n de base de datos
DB_PATH = os.path.join(os.path.dirname(__file__), '../database', 'menu.db')
engine = create_engine(f'sqlite:///{DB_PATH}', echo=False)
Session = sessionmaker(bind=engine)

# Blueprint espec√≠fico para categor√≠as
categorias_bp = Blueprint('categorias', __name__, url_prefix='/categorias')

# üé® SISTEMA DE ICONOS AUTOM√ÅTICO
def detectar_icono_categoria(nombre_categoria):
    """
    ü§ñ DETECTA AUTOM√ÅTICAMENTE EL ICONO APROPIADO PARA UNA CATEGOR√çA
    Usa inteligencia artificial por palabras clave y sin√≥nimos
    """
    nombre = nombre_categoria.lower().strip()
    
    # Diccionario inteligente de iconos por categor√≠a
    iconos_por_categoria = {
        # ENTRADAS Y APERITIVOS
        'entradas': 'üçú', 'entrada': 'üçú', 'aperitivos': 'üçú', 'aperitivo': 'üçú',
        'antipasto': 'üçú', 'antipastos': 'üçú', 'bocadillos': 'üçú', 'bocadillo': 'üçú',
        'tapas': 'üçú', 'tapa': 'üçú', 'picada': 'üçú', 'picadas': 'üçú',
        
        # PLATOS PRINCIPALES
        'platos principales': 'üçΩÔ∏è', 'plato principal': 'üçΩÔ∏è', 'principales': 'üçΩÔ∏è',
        'almuerzo': 'üçΩÔ∏è', 'almuerzos': 'üçΩÔ∏è', 'cena': 'üçΩÔ∏è', 'cenas': 'üçΩÔ∏è',
        'comida': 'üçΩÔ∏è', 'comidas': 'üçΩÔ∏è', 'menu': 'üçΩÔ∏è', 'men√∫': 'üçΩÔ∏è',
        'fuerte': 'üçΩÔ∏è', 'fuertes': 'üçΩÔ∏è', 'ejecutivo': 'üçΩÔ∏è',
        
        # POSTRES Y DULCES
        'postres': 'üßÅ', 'postre': 'üßÅ', 'dulces': 'üßÅ', 'dulce': 'üßÅ',
        'dessert': 'üßÅ', 'desserts': 'üßÅ', 'tortas': 'üç∞', 'torta': 'üç∞',
        'pasteles': 'üç∞', 'pastel': 'üç∞', 'helados': 'üç¶', 'helado': 'üç¶',
        'reposter√≠a': 'üßÅ', 'reposteria': 'üßÅ',
        
        # BEBIDAS
        'bebidas': 'üç∑', 'bebida': 'üç∑', 'drinks': 'üç∑', 'drink': 'üç∑',
        'l√≠quidos': 'üç∑', 'liquidos': 'üç∑',
        
        # BEBIDAS ESPEC√çFICAS
        'cervezas': 'üç∫', 'cerveza': 'üç∫', 'beer': 'üç∫', 'beers': 'üç∫',
        'vinos': 'üç∑', 'vino': 'üç∑', 'wine': 'üç∑', 'wines': 'üç∑',
        'cocteles': 'üç∏', 'coctel': 'üç∏', 'cocktail': 'üç∏', 'cocktails': 'üç∏',
        'jugos': 'üßÉ', 'jugo': 'üßÉ', 'juice': 'üßÉ', 'juices': 'üßÉ',
        'refrescos': 'ü•§', 'refresco': 'ü•§', 'gaseosas': 'ü•§', 'gaseosa': 'ü•§',
        'sodas': 'ü•§', 'soda': 'ü•§',
        
        # BEBIDAS CALIENTES
        'caf√©': '‚òï', 'cafes': '‚òï', 'coffee': '‚òï',
        't√©': 'üçµ', 'te': 'üçµ', 'tes': 'üçµ', 'tea': 'üçµ', 'teas': 'üçµ',
        'arom√°ticas': 'üçµ', 'aromaticas': 'üçµ', 'arom√°tica': 'üçµ', 'aromatica': 'üçµ',
        'infusiones': 'üçµ', 'infusion': 'üçµ', 'chocolate caliente': '‚òï',
        
        # COMIDA ESPEC√çFICA
        'pizza': 'üçï', 'pizzas': 'üçï', 'italiana': 'üçï', 'italianas': 'üçï',
        'hamburguesas': 'üçî', 'hamburguesa': 'üçî', 'burger': 'üçî', 'burgers': 'üçî',
        's√°ndwich': 'ü•™', 'sandwich': 'ü•™', 'sandwiches': 'ü•™',
        'tacos': 'üåÆ', 'taco': 'üåÆ', 'mexicana': 'üåÆ', 'mexicanas': 'üåÆ',
        'sushi': 'üç£', 'japonesa': 'üç£', 'japonesas': 'üç£', 'asi√°tica': 'üçú', 'asiaticas': 'üçú',
        
        # ENSALADAS Y SALUDABLES
        'ensaladas': 'ü•ó', 'ensalada': 'ü•ó', 'salad': 'ü•ó', 'salads': 'ü•ó',
        'saludables': 'ü•ó', 'saludable': 'ü•ó', 'healthy': 'ü•ó', 'light': 'ü•ó',
        'vegetariana': 'ü•ó', 'vegetarianas': 'ü•ó', 'vegana': 'üå±', 'veganas': 'üå±',
        
        # PANADER√çA Y DESAYUNO
        'panader√≠a': 'ü•ñ', 'panaderia': 'ü•ñ', 'panes': 'üçû', 'pan': 'üçû',
        'desayuno': 'ü•ê', 'desayunos': 'ü•ê', 'breakfast': 'ü•ê',
        'tostadas': 'üçû', 'tostada': 'üçû', 'croissant': 'ü•ê', 'croissants': 'ü•ê',
        
        # SNACKS Y APERITIVOS
        'snacks': 'üçø', 'snack': 'üçø', 'mecato': 'üçø', 'mecatos': 'üçø',
        'papas': 'üçü', 'papa': 'üçü', 'fritas': 'üçü', 'frita': 'üçü',
        'nachos': 'üßÄ', 'nacho': 'üßÄ', 'chips': 'üçø',
        
        # CARNES Y PROTE√çNAS
        'carnes': 'ü•©', 'carne': 'ü•©', 'meat': 'ü•©', 'parrilla': 'ü•©',
        'pollo': 'üçó', 'pollos': 'üçó', 'chicken': 'üçó', 'ave': 'üçó', 'aves': 'üçó',
        'pescado': 'üêü', 'pescados': 'üêü', 'fish': 'üêü', 'mariscos': 'ü¶ê', 'marisco': 'ü¶ê',
        
        # ESPECIALES Y PROMOCIONES
        'promociones': 'üéâ', 'promocion': 'üéâ', 'promo': 'üéâ', 'promos': 'üéâ',
        'especiales': '‚≠ê', 'especial': '‚≠ê', 'del d√≠a': '‚≠ê', 'del dia': '‚≠ê',
        'combo': 'üçΩÔ∏è', 'combos': 'üçΩÔ∏è', 'men√∫ del d√≠a': '‚≠ê', 'menu del dia': '‚≠ê'
    }
    
    # Buscar coincidencia exacta primero
    if nombre in iconos_por_categoria:
        return iconos_por_categoria[nombre]
    
    # Buscar coincidencias parciales (contiene la palabra)
    for palabra_clave, icono in iconos_por_categoria.items():
        if palabra_clave in nombre or nombre in palabra_clave:
            return icono
    
    # Buscar por palabras individuales
    palabras = re.split(r'\s+', nombre)
    for palabra in palabras:
        if palabra in iconos_por_categoria:
            return iconos_por_categoria[palabra]
    
    # Fallback: icono gen√©rico por defecto
    return 'üçΩÔ∏è'

def generar_codigo_categoria(nombre_categoria):
    """
    üè∑Ô∏è GENERA C√ìDIGO AUTOM√ÅTICO PARA CATEGOR√çA
    Basado en las primeras letras del nombre
    """
    # Eliminar acentos y caracteres especiales
    import unicodedata
    nombre_limpio = unicodedata.normalize('NFD', nombre_categoria).encode('ascii', 'ignore').decode('ascii')
    
    # Tomar las primeras 3-4 letras y convertir a may√∫sculas
    palabras = nombre_limpio.split()
    if len(palabras) >= 2:
        # Para nombres compuestos: primeras 2 letras de cada palabra
        codigo = ''.join([palabra[:2].upper() for palabra in palabras[:2]])
    else:
        # Para nombre simple: primeras 4 letras
        codigo = palabras[0][:4].upper()
    
    return codigo

# üîß FUNCI√ìN HELPER PARA SERIALIZACI√ìN
def categoria_to_dict(categoria):
    """Convierte un objeto Categoria a diccionario para JSON"""
    return {
        'id': categoria.id,
        'codigo': getattr(categoria, 'codigo', ''),
        'nombre': categoria.titulo,  # Usar titulo directamente del modelo
        'descripcion': getattr(categoria, 'descripcion', None),
        'activa': getattr(categoria, 'activa', True),
        'icono': getattr(categoria, 'icono', ''),
        'orden': getattr(categoria, 'orden', 0)
    }

def subcategoria_to_dict(subcategoria):
    """Convierte un objeto Subcategoria a diccionario para JSON"""
    return {
        'id': subcategoria.id,
        'codigo': getattr(subcategoria, 'codigo', ''),
        'nombre': subcategoria.nombre,
        'descripcion': getattr(subcategoria, 'descripcion', ''),
        'categoria_id': subcategoria.categoria_id,
        'tipo': getattr(subcategoria, 'tipo', ''),
        'activa': getattr(subcategoria, 'activa', True)
    }

@categorias_bp.route('/previsualizar-icono', methods=['GET', 'POST'])
def previsualizar_icono():
    """
    üëÅÔ∏è PREVISUALIZAR ICONO AUTOM√ÅTICO
    Permite ver qu√© icono se asignar√≠a a una categor√≠a sin crearla
    """
    try:
        # Obtener nombre del request (GET o POST)
        if request.method == 'GET':
            nombre = request.args.get('nombre', '').strip()
        else:  # POST
            if request.is_json:
                data = request.json
                nombre = data.get('nombre', '').strip()
            else:
                nombre = request.form.get('nombre', '').strip()
        
        if not nombre:
            return jsonify({'error': 'Nombre requerido'}), 400
        
        icono_detectado = detectar_icono_categoria(nombre)
        codigo_sugerido = generar_codigo_categoria(nombre)
        
        return jsonify({
            'nombre': nombre,
            'icono_sugerido': icono_detectado,
            'codigo_sugerido': codigo_sugerido,
            'preview': f"{nombre} ‚Üí {icono_detectado}",
            'confianza': 0.95  # Simulado para ahora
        })
        
    except Exception as e:
        print(f"‚ùå Error previsualizando icono: {e}")
        return jsonify({'error': str(e)}), 500

@categorias_bp.route('/', methods=['GET', 'POST'])
def manejar_categorias():
    """
    üìã MANEJAR CATEGOR√çAS - GET: Listar | POST: Crear
    """
    if request.method == 'GET':
        # üìã LISTAR TODAS LAS CATEGOR√çAS
        try:
            session = Session()
            
            categorias = session.query(Categoria).filter(Categoria.activa == True).all()
            categorias_dict = [categoria_to_dict(categoria) for categoria in categorias]
            session.close()
            
            return jsonify({
                'categorias': categorias_dict,
                'total': len(categorias_dict)
            })
            
        except Exception as e:
            print(f"‚ùå Error listando categor√≠as: {e}")
            return jsonify({'error': f'Error interno del servidor: {str(e)}'}), 500
    
    elif request.method == 'POST':
        # ‚ûï CREAR NUEVA CATEGOR√çA CON ICONO AUTOM√ÅTICO
        print("üöÄ ENDPOINT POST /categorias/ EJECUT√ÅNDOSE")
        try:
            session = Session()
            
            # Obtener datos del request
            if request.is_json:
                data = request.json
            else:
                data = request.form.to_dict()
            
            print(f"üìù Datos recibidos: {data}")
            
            # Validaciones b√°sicas
            if not data.get('nombre'):
                session.close()
                return jsonify({'error': 'El nombre es requerido'}), 400
            
            nombre_categoria = data.get('nombre').strip()
            print(f"üè∑Ô∏è Categor√≠a a crear: {nombre_categoria}")
            
            # üé® ASIGNACI√ìN AUTOM√ÅTICA DE ICONO
            icono_auto = detectar_icono_categoria(nombre_categoria)
            icono_final = data.get('icono') or icono_auto  # Usar icono manual si se proporciona, sino autom√°tico
            print(f"üé® Icono autom√°tico detectado: {icono_auto} ‚Üí Final: {icono_final}")
            
            # üè∑Ô∏è GENERACI√ìN AUTOM√ÅTICA DE C√ìDIGO
            codigo_auto = generar_codigo_categoria(nombre_categoria)
            codigo_final = data.get('codigo') or codigo_auto
            
            # Verificar si c√≥digo ya existe y generar uno √∫nico
            if session.query(Categoria).filter_by(codigo=codigo_final).first():
                contador = 1
                codigo_nuevo = f"{codigo_auto}{contador:02d}"
                while session.query(Categoria).filter_by(codigo=codigo_nuevo).first():
                    contador += 1
                    codigo_nuevo = f"{codigo_auto}{contador:02d}"
                codigo_final = codigo_nuevo
            
            # Crear nueva categor√≠a
            nueva_categoria = Categoria(
                codigo=codigo_final,
                titulo=nombre_categoria,
                descripcion=data.get('descripcion', ''),
                icono=icono_final,  # üé® Icono autom√°tico asignado
                orden=int(data.get('orden', 0)) if data.get('orden') else 0,
                activa=data.get('activa') in [True, 'true', 'on', '1', 1] if 'activa' in data else True
            )
            
            session.add(nueva_categoria)
            session.commit()
            
            categoria_creada = {
                'id': nueva_categoria.id,
                'codigo': nueva_categoria.codigo,
                'nombre': nueva_categoria.titulo,
                'icono': nueva_categoria.icono,
                'descripcion': nueva_categoria.descripcion
            }
            
            session.close()
            
            print(f"‚úÖ Categor√≠a creada exitosamente: {categoria_creada}")
            return jsonify({
                'message': f'Categor√≠a "{nombre_categoria}" creada exitosamente',
                'categoria': categoria_creada,
                'icono_detectado': icono_auto,
                'codigo_generado': codigo_final
            })
            
        except Exception as e:
            print(f"‚ùå Error creando categor√≠a: {e}")
            return jsonify({'error': str(e)}), 500

@categorias_bp.route('/<int:id_categoria>')
def obtener_categoria(id_categoria):
    """
    üîç OBTENER CATEGOR√çA POR ID
    Devuelve los detalles de una categor√≠a espec√≠fica
    """
    try:
        session = Session()
        categoria = session.query(Categoria).filter_by(id=id_categoria).first()
        
        if not categoria:
            session.close()
            return jsonify({'error': 'Categor√≠a no encontrada'}), 404
        
        categoria_dict = categoria_to_dict(categoria)
        session.close()
        
        return jsonify({
            'categoria': categoria_dict
        })
        
    except Exception as e:
        print(f"‚ùå Error obteniendo categor√≠a {id_categoria}: {e}")
        return jsonify({'error': f'Error interno del servidor: {str(e)}'}), 500

@categorias_bp.route('/subcategorias/<int:categoria_id>')
def listar_subcategorias(categoria_id):
    """
    üìã LISTAR SUBCATEGOR√çAS DE UNA CATEGOR√çA
    Devuelve subcategor√≠as espec√≠ficas de una categor√≠a
    """
    try:
        session = Session()
        
        subcategorias = session.query(Subcategoria)\
            .filter(Subcategoria.categoria_id == categoria_id)\
            .filter(Subcategoria.activa == True)\
            .all()
        
        subcategorias_dict = [subcategoria_to_dict(subcategoria) for subcategoria in subcategorias]
        session.close()
        
        return jsonify({
            'subcategorias': subcategorias_dict,
            'total': len(subcategorias_dict)
        })
        
    except Exception as e:
        print(f"‚ùå Error listando subcategor√≠as de categor√≠a {categoria_id}: {e}")
        return jsonify({'error': str(e)}), 500

@categorias_bp.route('/<int:categoria_id>', methods=['PUT'])
def actualizar_categoria(categoria_id):
    """
    ‚úèÔ∏è ACTUALIZAR CATEGOR√çA EXISTENTE
    Actualiza campos de una categor√≠a espec√≠fica
    """
    try:
        session = Session()
        
        categoria = session.query(Categoria).filter(Categoria.id == categoria_id).first()
        
        if not categoria:
            session.close()
            return jsonify({'error': 'Categor√≠a no encontrada'}), 404
        
        # Obtener datos del request
        if request.is_json:
            data = request.json
        else:
            data = request.form.to_dict()
        
        # Actualizar campos
        if 'nombre' in data:
            categoria.titulo = data['nombre']  # Usar titulo seg√∫n el modelo
        if 'descripcion' in data:
            categoria.descripcion = data['descripcion']
        if 'icono' in data:
            categoria.icono = data['icono']
        if 'codigo' in data:
            categoria.codigo = data['codigo']
        if 'orden' in data:
            categoria.orden = int(data['orden']) if data['orden'] else 0
        if 'activa' in data:
            # Convertir correctamente el valor del checkbox
            categoria.activa = data['activa'] in [True, 'true', 'on', '1', 1]
        
        session.commit()
        session.close()
        
        return jsonify({
            'message': 'Categor√≠a actualizada exitosamente'
        })
        
    except Exception as e:
        print(f"‚ùå Error actualizando categor√≠a {categoria_id}: {e}")
        return jsonify({'error': str(e)}), 500

@categorias_bp.route('/<int:categoria_id>', methods=['DELETE'])
def eliminar_categoria(categoria_id):
    """
    üóëÔ∏è ELIMINAR CATEGOR√çA
    Marca una categor√≠a como inactiva
    """
    try:
        session = Session()
        
        categoria = session.query(Categoria).filter(Categoria.id == categoria_id).first()
        
        if not categoria:
            session.close()
            return jsonify({'error': 'Categor√≠a no encontrada'}), 404
        
        # En lugar de eliminar, marcar como inactiva
        categoria.activa = False
        session.commit()
        session.close()
        
        return jsonify({
            'message': f'Categor√≠a "{categoria.titulo}" desactivada exitosamente'
        })
        
    except Exception as e:
        print(f"‚ùå Error eliminando categor√≠a {categoria_id}: {e}")
        return jsonify({'error': str(e)}), 500
