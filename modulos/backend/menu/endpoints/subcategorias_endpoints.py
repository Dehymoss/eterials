#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
üè∑Ô∏è ENDPOINTS PARA SUBCATEGOR√çAS
Sistema completo de gesti√≥n de subcategor√≠as con iconos autom√°ticos
y relaci√≥n con categor√≠as padre
"""

from flask import Blueprint, request, jsonify
from sqlalchemy.orm import sessionmaker, joinedload
from sqlalchemy import create_engine
import os
import re
from modulos.backend.menu.database.models.categoria import Categoria
from modulos.backend.menu.database.models.subcategoria import Subcategoria

# Configuraci√≥n de base de datos
DB_PATH = os.path.join(os.path.dirname(__file__), '../database', 'menu.db')
engine = create_engine(f'sqlite:///{DB_PATH}', echo=False)
Session = sessionmaker(bind=engine)

# Blueprint espec√≠fico para subcategor√≠as
subcategorias_bp = Blueprint('subcategorias', __name__, url_prefix='/subcategorias')

# --- FUNCIONES HELPER ---

def subcategoria_to_dict(subcategoria):
    """Convierte un objeto Subcategoria a diccionario para JSON"""
    return {
        'id': subcategoria.id,
        'nombre': subcategoria.nombre,
        'descripcion': subcategoria.descripcion,
        'icono': subcategoria.icono or 'üè∑Ô∏è',
        'codigo': subcategoria.codigo,
        'categoria_id': subcategoria.categoria_id,
        'categoria_nombre': subcategoria.categoria.titulo if subcategoria.categoria else None,
        'orden': subcategoria.orden,
        'activa': subcategoria.activa
    }

def detectar_icono_subcategoria(nombre_subcategoria):
    """
    üé® SISTEMA DE DETECCI√ìN AUTOM√ÅTICA DE ICONOS PARA SUBCATEGOR√çAS
    Analiza el nombre y sugiere el icono m√°s apropiado
    """
    nombre = nombre_subcategoria.lower().strip()
    
    # Mapeo espec√≠fico para subcategor√≠as (m√°s granular que categor√≠as)
    iconos_subcategorias = {
        # CARNES Y PROTE√çNAS
        'carne': 'ü•©', 'carnes': 'ü•©', 'res': 'ü•©', 'ternera': 'ü•©',
        'cerdo': 'ü•ì', 'pork': 'ü•ì', 'cochino': 'ü•ì',
        'pollo': 'üçó', 'aves': 'üçó', 'gallina': 'üçó', 'pavo': 'üçó',
        'pescado': 'üêü', 'salmon': 'üç£', 'atun': 'üç£', 'trucha': 'üêü',
        'mariscos': 'ü¶ê', 'camaron': 'ü¶ê', 'langosta': 'ü¶û', 'cangrejo': 'ü¶Ä',
        
        # BEBIDAS ESPEC√çFICAS
        'cerveza': 'üç∫', 'beer': 'üç∫', 'artesanal': 'üç∫', 'artesanales': 'üç∫',
        'vino': 'üç∑', 'wine': 'üç∑', 'tinto': 'üç∑', 'blanco': 'üç∑',
        'whisky': 'ü•É', 'ron': 'ü•É', 'vodka': 'ü•É', 'tequila': 'ü•É',
        'cafe': '‚òï', 'coffee': '‚òï', 'espresso': '‚òï', 'cappuccino': '‚òï',
        'te': 'üçµ', 'tea': 'üçµ', 'infusion': 'üçµ', 'herbal': 'üçµ',
        'jugo': 'üßÉ', 'zumo': 'üßÉ', 'natural': 'üßÉ', 'fresco': 'üßÉ',
        'soda': 'ü•§', 'gaseosa': 'ü•§', 'refresco': 'ü•§', 'cola': 'ü•§',
        
        # POSTRES ESPEC√çFICOS
        'helado': 'üç®', 'gelato': 'üç®', 'sorbete': 'üç®',
        'torta': 'üç∞', 'pastel': 'üç∞', 'cake': 'üç∞',
        'flan': 'üçÆ', 'pudin': 'üçÆ', 'creme': 'üçÆ',
        'chocolate': 'üç´', 'cacao': 'üç´', 'brownie': 'üç´',
        'fruta': 'üçì', 'frutas': 'üçì', 'fresa': 'üçì', 'mango': 'ü•≠',
        
        # PASTA Y GRANOS
        'pasta': 'üçù', 'spaghetti': 'üçù', 'fettuccine': 'üçù', 'ravioli': 'üçù',
        'arroz': 'üçö', 'rice': 'üçö', 'risotto': 'üçö',
        'pizza': 'üçï', 'pizzas': 'üçï', 'margherita': 'üçï', 'pepperoni': 'üçï',
        
        # ENSALADAS Y VEGETALES
        'ensalada': 'ü•ó', 'salad': 'ü•ó', 'verde': 'ü•ó', 'mixta': 'ü•ó',
        'vegano': 'ü•¨', 'vegetariano': 'ü•¨', 'vegan': 'ü•¨',
        'vegetal': 'ü•¨', 'vegetales': 'ü•¨',
        
        # PANADER√çA
        'pan': 'üçû', 'bread': 'üçû', 'integral': 'üçû', 'artesano': 'üçû',
        'sandwich': 'ü•™', 'bocadillo': 'ü•™', 'torta': 'ü•™',
        'empanada': 'ü•ü', 'empanadas': 'ü•ü', 'pastel': 'ü•ü',
        
        # ESPECIALES REGIONALES
        'mexicana': 'üåÆ', 'mexican': 'üåÆ', 'taco': 'üåÆ', 'burrito': 'üåØ',
        'italiana': 'üçù', 'italian': 'üçù', 'napolitana': 'üçï',
        'asi√°tica': 'üçú', 'asian': 'üçú', 'ramen': 'üçú', 'sushi': 'üç£',
        'mediterranea': 'ü´í', 'mediterranean': 'ü´í', 'griega': 'ü´í',
        
        # TEMPERATURA/PREPARACI√ìN
        'caliente': 'üî•', 'hot': 'üî•', 'picante': 'üå∂Ô∏è',
        'frio': '‚ùÑÔ∏è', 'cold': '‚ùÑÔ∏è', 'helado': 'üßä',
        'frito': 'üç§', 'asado': 'üî•', 'grillado': 'üî•',
        'horneado': 'üî•', 'vapor': '‚ô®Ô∏è',
        
        # OCASIONES ESPECIALES
        'premium': '‚≠ê', 'gourmet': 'üë®‚Äçüç≥', 'especial': '‚ú®',
        'tradicional': 'üè†', 'casero': 'üè†', 'artesanal': 'üë®‚Äçüç≥',
        'infantil': 'üßí', 'kids': 'üßí', 'ni√±os': 'üßí',
        'ejecutivo': 'üíº', 'business': 'üíº'
    }
    
    # Buscar coincidencia exacta o parcial
    for clave, icono in iconos_subcategorias.items():
        if clave in nombre:
            print(f"üé® Icono detectado para '{nombre_subcategoria}': {icono} (coincide con '{clave}')")
            return icono
    
    # Icono por defecto para subcategor√≠as
    print(f"üé® Icono por defecto para '{nombre_subcategoria}': üè∑Ô∏è")
    return 'üè∑Ô∏è'

def generar_codigo_subcategoria(nombre, categoria_nombre=None):
    """
    üè∑Ô∏è GENERAR C√ìDIGO √öNICO PARA SUBCATEGORIA
    Formato: CATSUB (4 letras categor√≠a + 3 letras subcategor√≠a)
    """
    # Limpiar y obtener primeras letras del nombre
    nombre_limpio = re.sub(r'[^a-zA-Z\s]', '', nombre.upper())
    palabras = nombre_limpio.split()
    
    # Generar c√≥digo de subcategor√≠a
    if len(palabras) >= 2:
        codigo_sub = palabras[0][:2] + palabras[1][:1]
    else:
        codigo_sub = palabras[0][:3] if palabras else 'SUB'
    
    # Generar c√≥digo de categor√≠a si est√° disponible
    if categoria_nombre:
        categoria_limpia = re.sub(r'[^a-zA-Z\s]', '', categoria_nombre.upper())
        palabras_cat = categoria_limpia.split()
        if len(palabras_cat) >= 2:
            codigo_cat = palabras_cat[0][:2] + palabras_cat[1][:1]
        else:
            codigo_cat = palabras_cat[0][:3] if palabras_cat else 'CAT'
    else:
        codigo_cat = 'CAT'
    
    return f"{codigo_cat}{codigo_sub}"

# --- ENDPOINTS ---

@subcategorias_bp.route('/', methods=['GET', 'POST'])
def manejar_subcategorias():
    """
    üéØ ENDPOINT PRINCIPAL DE SUBCATEGOR√çAS
    GET: Listar todas las subcategor√≠as
    POST: Crear nueva subcategor√≠a
    """
    session = Session()
    try:
        if request.method == 'GET':
            print("üöÄ ENDPOINT GET /subcategorias/ EJECUT√ÅNDOSE")
            
            # Obtener subcategor√≠as con informaci√≥n de categor√≠a
            subcategorias = session.query(Subcategoria).options(
                joinedload(Subcategoria.categoria)
            ).order_by(Subcategoria.orden, Subcategoria.nombre).all()
            
            subcategorias_data = [subcategoria_to_dict(sub) for sub in subcategorias]
            
            print(f"‚úÖ {len(subcategorias_data)} subcategor√≠as encontradas")
            return jsonify({
                'success': True,
                'subcategorias': subcategorias_data,
                'total': len(subcategorias_data)
            })
        
        elif request.method == 'POST':
            print("üöÄ ENDPOINT POST /subcategorias/ EJECUT√ÅNDOSE")
            
            # Obtener datos del request
            if request.is_json:
                data = request.get_json()
            else:
                data = request.form.to_dict()
            
            print(f"üìù Datos recibidos: {data}")
            
            # Validar datos requeridos
            if not data.get('nombre'):
                return jsonify({
                    'success': False,
                    'message': 'El nombre de la subcategor√≠a es obligatorio'
                }), 400
            
            if not data.get('categoria_id'):
                return jsonify({
                    'success': False,
                    'message': 'Debe seleccionar una categor√≠a padre'
                }), 400
            
            # Verificar que la categor√≠a existe
            categoria = session.query(Categoria).filter_by(
                id=int(data['categoria_id'])
            ).first()
            
            if not categoria:
                return jsonify({
                    'success': False,
                    'message': 'La categor√≠a seleccionada no existe'
                }), 400
            
            # Generar c√≥digo e icono autom√°ticos
            codigo = generar_codigo_subcategoria(data['nombre'], categoria.titulo)
            icono = detectar_icono_subcategoria(data['nombre'])
            
            print(f"üè∑Ô∏è Subcategor√≠a a crear: {data['nombre']}")
            print(f"üìÇ Categor√≠a padre: {categoria.titulo}")
            print(f"üé® Icono autom√°tico detectado: {icono}")
            print(f"üè∑Ô∏è C√≥digo generado: {codigo}")
            
            # Crear nueva subcategor√≠a
            nueva_subcategoria = Subcategoria(
                nombre=data['nombre'],
                descripcion=data.get('descripcion', ''),
                codigo=codigo,
                icono=icono,
                categoria_id=int(data['categoria_id']),
                activa=data.get('activa', True),
                orden=data.get('orden', 0)
            )
            
            session.add(nueva_subcategoria)
            session.commit()
            
            # Recargar con informaci√≥n de categor√≠a
            session.refresh(nueva_subcategoria)
            nueva_subcategoria = session.query(Subcategoria).options(
                joinedload(Subcategoria.categoria)
            ).filter_by(id=nueva_subcategoria.id).first()
            
            resultado = subcategoria_to_dict(nueva_subcategoria)
            
            print(f"‚úÖ Subcategor√≠a creada exitosamente: {resultado}")
            return jsonify({
                'success': True,
                'message': 'Subcategor√≠a creada correctamente',
                'subcategoria': resultado
            })
            
    except Exception as e:
        session.rollback()
        print(f"‚ùå Error en manejar_subcategorias: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Error del servidor: {str(e)}'
        }), 500
    finally:
        session.close()

@subcategorias_bp.route('/<int:subcategoria_id>', methods=['GET', 'PUT', 'DELETE'])
def manejar_subcategoria_especifica(subcategoria_id):
    """
    üéØ ENDPOINT PARA SUBCATEGOR√çA ESPEC√çFICA
    GET: Obtener detalles de una subcategor√≠a
    PUT: Actualizar subcategor√≠a
    DELETE: Eliminar subcategor√≠a
    """
    session = Session()
    try:
        subcategoria = session.query(Subcategoria).options(
            joinedload(Subcategoria.categoria)
        ).filter_by(id=subcategoria_id).first()
        
        if not subcategoria:
            return jsonify({
                'success': False,
                'message': 'Subcategor√≠a no encontrada'
            }), 404
        
        if request.method == 'GET':
            return jsonify({
                'success': True,
                'subcategoria': subcategoria_to_dict(subcategoria)
            })
        
        elif request.method == 'PUT':
            # Obtener datos de actualizaci√≥n
            if request.is_json:
                data = request.get_json()
            else:
                data = request.form.to_dict()
            
            print(f"üîÑ Actualizando subcategor√≠a {subcategoria_id}: {data}")
            
            # Actualizar campos
            if 'nombre' in data:
                subcategoria.nombre = data['nombre']
                # Regenerar icono si cambi√≥ el nombre
                subcategoria.icono = detectar_icono_subcategoria(data['nombre'])
            
            if 'descripcion' in data:
                subcategoria.descripcion = data['descripcion']
                
            if 'categoria_id' in data:
                # Verificar que la nueva categor√≠a existe
                nueva_categoria = session.query(Categoria).filter_by(
                    id=int(data['categoria_id'])
                ).first()
                if nueva_categoria:
                    subcategoria.categoria_id = int(data['categoria_id'])
                    # Regenerar c√≥digo con nueva categor√≠a
                    subcategoria.codigo = generar_codigo_subcategoria(
                        subcategoria.nombre, 
                        nueva_categoria.titulo
                    )
                    
            if 'activa' in data:
                subcategoria.activa = bool(data['activa'])
                
            if 'orden' in data:
                subcategoria.orden = int(data['orden'])
            
            session.commit()
            session.refresh(subcategoria)
            
            # Recargar con informaci√≥n actualizada
            subcategoria = session.query(Subcategoria).options(
                joinedload(Subcategoria.categoria)
            ).filter_by(id=subcategoria_id).first()
            
            return jsonify({
                'success': True,
                'message': 'Subcategor√≠a actualizada correctamente',
                'subcategoria': subcategoria_to_dict(subcategoria)
            })
        
        elif request.method == 'DELETE':
            print(f"üóëÔ∏è Eliminando subcategor√≠a: {subcategoria.nombre}")
            
            session.delete(subcategoria)
            session.commit()
            
            return jsonify({
                'success': True,
                'message': 'Subcategor√≠a eliminada correctamente'
            })
            
    except Exception as e:
        session.rollback()
        print(f"‚ùå Error en subcategor√≠a espec√≠fica: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Error del servidor: {str(e)}'
        }), 500
    finally:
        session.close()

@subcategorias_bp.route('/categoria/<int:categoria_id>', methods=['GET'])
def listar_subcategorias_por_categoria(categoria_id):
    """
    üìÇ OBTENER SUBCATEGOR√çAS DE UNA CATEGOR√çA ESPEC√çFICA
    """
    session = Session()
    try:
        # Verificar que la categor√≠a existe
        categoria = session.query(Categoria).filter_by(id=categoria_id).first()
        if not categoria:
            return jsonify({
                'success': False,
                'message': 'Categor√≠a no encontrada'
            }), 404
        
        # Obtener subcategor√≠as
        subcategorias = session.query(Subcategoria).options(
            joinedload(Subcategoria.categoria)
        ).filter_by(categoria_id=categoria_id).order_by(
            Subcategoria.orden, Subcategoria.nombre
        ).all()
        
        subcategorias_data = [subcategoria_to_dict(sub) for sub in subcategorias]
        
        return jsonify({
            'success': True,
            'categoria': {
                'id': categoria.id,
                'nombre': categoria.titulo,
                'icono': categoria.icono
            },
            'subcategorias': subcategorias_data,
            'total': len(subcategorias_data)
        })
        
    except Exception as e:
        print(f"‚ùå Error listando subcategor√≠as por categor√≠a: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Error del servidor: {str(e)}'
        }), 500
    finally:
        session.close()

@subcategorias_bp.route('/previsualizar-icono', methods=['GET'])
def previsualizar_icono():
    """
    üé® PREVISUALIZAR ICONO BASADO EN NOMBRE
    Utilizado por el frontend para mostrar iconos en tiempo real
    """
    nombre = request.args.get('nombre', '').strip()
    
    if not nombre:
        return jsonify({
            'success': False,
            'message': 'Par√°metro nombre es requerido'
        }), 400
    
    icono = detectar_icono_subcategoria(nombre)
    
    return jsonify({
        'success': True,
        'icono': icono,
        'nombre': nombre
    })

if __name__ == '__main__':
    print("üè∑Ô∏è Sistema de subcategor√≠as listo")
